{"version":3,"sources":["component/ui/card/Card.js","component/debouncing/Debouncing.js","utils/Utils.js","component/ui/button/Button.js","component/throttling/Throttling.js","App.js","serviceWorker.js","index.js"],"names":["card","props","className","children","Debouncing","useState","value1","setValue1","eventCount1","setEventCount1","networkCount1","setNetworkCount1","delay","setDelay","value2","setValue2","eventCount2","setEventCount2","networkCount2","setNetworkCount2","debounceNetworkChange","useCallback","func","timer","context","this","args","arguments","clearTimeout","setTimeout","apply","debounce","value","Number","type","onChange","event","target","currentTarget","buttons","React","memo","onClick","clicked","Throttling","throttleNetworkChange","wait","throttle","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cfec5fc0.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nconst card = (props) => {\r\n    return (\r\n        <div className='card'>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default card;","import React, { useState, useCallback } from 'react';\r\nimport './Debouncing.css';\r\n\r\nimport Card from '../ui/card/Card';\r\nimport { debounce } from '../../utils/Utils';\r\n\r\nconst Debouncing = (props) => {\r\n\r\n    const [value1, setValue1] = useState('');\r\n    const [eventCount1, setEventCount1] = useState(0);\r\n    const [networkCount1, setNetworkCount1] = useState(0);\r\n    const [delay, setDelay] = useState('300');\r\n\r\n    const [value2, setValue2] = useState('');\r\n    const [eventCount2, setEventCount2] = useState(0);\r\n    const [networkCount2, setNetworkCount2] = useState(0);\r\n\r\n    const debounceNetworkChange = useCallback(debounce((value)=> {\r\n        setNetworkCount1(value)\r\n     }, Number(delay)), [delay]);\r\n \r\n\r\n    const input1ChangeHandler = (event) => {\r\n        setValue1(event.target.value);\r\n        setEventCount1(eventCount1 + 1);\r\n        debounceNetworkChange(networkCount1 + 1);\r\n    }\r\n\r\n    const input2ChangeHandler = (event) => {\r\n        setValue2(event.target.value);\r\n        setEventCount2(eventCount2 + 1);\r\n        setNetworkCount2(networkCount2 + 1);\r\n    }\r\n\r\n    return (\r\n        <Card>\r\n            <h2>Debouncing</h2>\r\n            <div className='simple-container'>\r\n                <div className=\"simple-box\">\r\n                    <h4><u>Input with debouncing</u></h4>\r\n                    <div className='list-container'>\r\n                        <ul>\r\n                            <li>Event count: <span className='event-class'>{eventCount1}</span></li>\r\n                            <li>Network call count: <span className='network-class'>{networkCount1}</span></li>\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"search-input\">\r\n                        <label>Type Something</label>\r\n                        <input\r\n                            type='text'\r\n                            value={value1}\r\n                            onChange={input1ChangeHandler}\r\n                        />\r\n                    </div>\r\n                    <div className=\"search-input\">\r\n                        <label>Set Delay (millisecond)</label>\r\n                        <input\r\n                            type='number'\r\n                            value={delay}\r\n                            onChange={(event) => setDelay(event.currentTarget.value)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"simple-box\">\r\n                    <h4><u>Input without debouncing</u></h4>\r\n                    <div className='list-container'>\r\n                        <ul>\r\n                            <li>Event count: <span className='event-class'>{eventCount2}</span></li>\r\n                            <li>Network call count: <span className='network-class'>{networkCount2}</span></li>\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"search-input\">\r\n                        <label>Type Something</label>\r\n                        <input\r\n                            type='text'\r\n                            value={value2}\r\n                            onChange={input2ChangeHandler}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div>\r\n               <p className='info'>\r\n               In the <strong>debouncing</strong> technique, no matter how many times the user fires the event, the attached function will be executed only after the specified time once the user stops firing the event. Here once the user had stopped typing for <em><b>{delay}ms</b></em> ,then only we increase networkCallCounter.\r\n               </p>\r\n            </div>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default Debouncing;","\r\nexport const debounce = function (func, delay) {\r\n    let timer;\r\n    return function () {\r\n        // reference the context and args for the setTimeout function\r\n        let context = this;\r\n        let args = arguments;\r\n        // Clear the timer and start a fresh new timer each time debounce is called.\r\n        if (timer) {\r\n            clearTimeout(timer);\r\n        }\r\n        timer = setTimeout(() => {\r\n            //defining the 'this' for the function. So that the scope does not change.\r\n            func.apply(context, args);\r\n        }, delay);\r\n    }\r\n}\r\n\r\nexport const throttle = function (func, delay) {\r\n    let wait = false;\r\n    return function () {\r\n        let context = this;\r\n        let args = arguments;\r\n        // since initially wait is false, so the below block of code will execute\r\n        if (!wait) {\r\n            func.apply(context, args);\r\n            // we set the wait to true. So that this block is not executed until the wait is again\r\n            // made false.\r\n            wait = true;\r\n            setTimeout(function () {\r\n                // we made it true after waiting for the delay amount of time.\r\n                wait = false;\r\n            }, delay);\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport './Button.css';\r\n\r\nconst buttons = React.memo((props) => (\r\n    <button className='button' onClick={props.clicked}>\r\n        {props.children}\r\n    </button>\r\n));\r\n\r\nexport default buttons;\r\n","import React, { useState, useCallback } from 'react';\r\nimport './Throttling.css'\r\n\r\nimport Card from '../ui/card/Card';\r\nimport Button from '../ui/button/Button';\r\nimport { throttle } from '../../utils/Utils';\r\n\r\nconst Throttling = (props) => {\r\n\r\n    const [eventCount1, setEventCount1] = useState(0);\r\n    const [networkCount1, setNetworkCount1] = useState(0);\r\n    const [delay, setDelay] = useState('300');\r\n\r\n    const [eventCount2, setEventCount2] = useState(0);\r\n    const [networkCount2, setNetworkCount2] = useState(0);\r\n\r\n    const throttleNetworkChange = useCallback(throttle((value) => {\r\n        setNetworkCount1(value)\r\n    }, Number(delay)), [delay]);\r\n\r\n    const button1Pressed = () => {\r\n        setEventCount1(eventCount1 + 1);\r\n        throttleNetworkChange(networkCount1 + 1);\r\n    }\r\n\r\n    const button2Pressed = () => {\r\n        setEventCount2(eventCount2 + 1);\r\n        setNetworkCount2(networkCount2 + 1);\r\n    }\r\n\r\n    return (\r\n        <Card>\r\n            <h2>Throttling</h2>\r\n            <div className='simple-container'>\r\n                <div className=\"simple-box\">\r\n                    <h4><u>Button with throttling</u></h4>\r\n                    <div className='list-container'>\r\n                        <ul>\r\n                            <li>Event count: <span className='event-class'>{eventCount1}</span></li>\r\n                            <li>Network call count: <span className='network-class'>{networkCount1}</span></li>\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"search-input\">\r\n                        <Button\r\n                            clicked={button1Pressed}\r\n                        >Click</Button>\r\n                    </div>\r\n                    <div className=\"search-input\">\r\n                        <label>Set Delay (millisecond)</label>\r\n                        <input\r\n                            type='number'\r\n                            value={delay}\r\n                            onChange={(event) => setDelay(event.currentTarget.value)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"simple-box\">\r\n                    <h4><u>Button without throttling</u></h4>\r\n                    <div className='list-container'>\r\n                        <ul>\r\n                            <li>Event count: <span className='event-class'>{eventCount2}</span></li>\r\n                            <li>Network call count: <span className='network-class'>{networkCount2}</span></li>\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"search-input\">\r\n                        <Button\r\n                            clicked={button2Pressed}\r\n                        >Click</Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div>\r\n               <p className='info'>\r\n               <strong>Throttling</strong> is a technique in which, no matter how many times the user fires the event, the attached function will be executed only once in a given time interval. Here we make sure that no matter how many times user had clicked the button, we increase networkCallCounter only once in every <em><b>{delay}ms</b></em>\r\n               </p>\r\n            </div>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default Throttling;","import React from 'react';\nimport './App.css';\n\nimport Debouncing from './component/debouncing/Debouncing';\nimport Throttling from './component/throttling/Throttling';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Throttling />\n      <Debouncing />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}